/**
 * This class file was automatically generated by jASN1 (http://www.openmuc.org)
 */

package htsjdk.samtools.sjam;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.LinkedList;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

public final class Program {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 5);
	protected BerIdentifier id;

	public byte[] code = null;
	public BerVisibleCompressedString identity = null;

	public BerVisibleCompressedString programName = null;

	public BerVisibleCompressedString commandLine = null;

	public BerVisibleCompressedString previousPgTag = null;

	public BerVisibleCompressedString description = null;

	public BerVisibleCompressedString programVersion = null;

	public Program() {
		id = identifier;
	}

	public Program(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public Program(BerVisibleCompressedString identity, BerVisibleCompressedString programName, BerVisibleCompressedString commandLine, BerVisibleCompressedString previousPgTag, BerVisibleCompressedString description, BerVisibleCompressedString programVersion) {
		id = identifier;
		this.identity = identity;
		this.programName = programName;
		this.commandLine = commandLine;
		this.previousPgTag = previousPgTag;
		this.description = description;
		this.programVersion = programVersion;
	}

	public int encode(BerByteArrayOutputStream berOStream, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				berOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (programVersion != null) {
				codeLength += programVersion.encode(berOStream, true);
			}
			
			if (description != null) {
				codeLength += description.encode(berOStream, true);
			}
			
			if (previousPgTag != null) {
				codeLength += previousPgTag.encode(berOStream, true);
			}
			
			if (commandLine != null) {
				codeLength += commandLine.encode(berOStream, true);
			}
			
			if (programName != null) {
				codeLength += programName.encode(berOStream, true);
			}
			
			codeLength += identity.encode(berOStream, true);
			
			codeLength += BerLength.encodeLength(berOStream, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(berOStream);
		}

		return codeLength;

	}

	public int decode(InputStream iStream, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		int choiceDecodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();
		boolean decodedIdentifier = false;

		if (explicit) {
			codeLength += id.decodeAndCheck(iStream);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(iStream);

		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleCompressedString.identifier)) {
				identity = new BerVisibleCompressedString();
				subCodeLength += identity.decode(iStream, false);
				decodedIdentifier = false;
			}
			else {
				throw new IOException("Identifier does not macht required sequence element identifer.");
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleCompressedString.identifier)) {
				programName = new BerVisibleCompressedString();
				subCodeLength += programName.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleCompressedString.identifier)) {
				commandLine = new BerVisibleCompressedString();
				subCodeLength += commandLine.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleCompressedString.identifier)) {
				previousPgTag = new BerVisibleCompressedString();
				subCodeLength += previousPgTag.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleCompressedString.identifier)) {
				description = new BerVisibleCompressedString();
				subCodeLength += description.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength < length.val) {
			if (decodedIdentifier == false) {
				subCodeLength += berIdentifier.decode(iStream);
				decodedIdentifier = true;
			}
			if (berIdentifier.equals(BerVisibleCompressedString.identifier)) {
				programVersion = new BerVisibleCompressedString();
				subCodeLength += programVersion.decode(iStream, false);
				decodedIdentifier = false;
			}
		}
		if (subCodeLength != length.val) {
			throw new IOException("Decoded sequence has wrong length tag");

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream berOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(berOStream, false);
		code = berOStream.getArray();
	}
}

